{"ast":null,"code":"'use strict';\n/* eslint indent: 4 */\n// Private helper class\n\nclass SubRange {\n  constructor(low, high) {\n    this.low = low;\n    this.high = high;\n    this.length = 1 + high - low;\n  }\n\n  overlaps(range) {\n    return !(this.high < range.low || this.low > range.high);\n  }\n\n  touches(range) {\n    return !(this.high + 1 < range.low || this.low - 1 > range.high);\n  } // Returns inclusive combination of SubRanges as a SubRange.\n\n\n  add(range) {\n    return new SubRange(Math.min(this.low, range.low), Math.max(this.high, range.high));\n  } // Returns subtraction of SubRanges as an array of SubRanges.\n  // (There's a case where subtraction divides it in 2)\n\n\n  subtract(range) {\n    if (range.low <= this.low && range.high >= this.high) {\n      return [];\n    } else if (range.low > this.low && range.high < this.high) {\n      return [new SubRange(this.low, range.low - 1), new SubRange(range.high + 1, this.high)];\n    } else if (range.low <= this.low) {\n      return [new SubRange(range.high + 1, this.high)];\n    } else {\n      return [new SubRange(this.low, range.low - 1)];\n    }\n  }\n\n  toString() {\n    return this.low == this.high ? this.low.toString() : this.low + '-' + this.high;\n  }\n\n}\n\nclass DRange {\n  constructor(a, b) {\n    this.ranges = [];\n    this.length = 0;\n    if (a != null) this.add(a, b);\n  }\n\n  _update_length() {\n    this.length = this.ranges.reduce((previous, range) => {\n      return previous + range.length;\n    }, 0);\n  }\n\n  add(a, b) {\n    var _add = subrange => {\n      var i = 0;\n\n      while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {\n        i++;\n      }\n\n      var newRanges = this.ranges.slice(0, i);\n\n      while (i < this.ranges.length && subrange.touches(this.ranges[i])) {\n        subrange = subrange.add(this.ranges[i]);\n        i++;\n      }\n\n      newRanges.push(subrange);\n      this.ranges = newRanges.concat(this.ranges.slice(i));\n\n      this._update_length();\n    };\n\n    if (a instanceof DRange) {\n      a.ranges.forEach(_add);\n    } else {\n      if (b == null) b = a;\n\n      _add(new SubRange(a, b));\n    }\n\n    return this;\n  }\n\n  subtract(a, b) {\n    var _subtract = subrange => {\n      var i = 0;\n\n      while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n        i++;\n      }\n\n      var newRanges = this.ranges.slice(0, i);\n\n      while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n        newRanges = newRanges.concat(this.ranges[i].subtract(subrange));\n        i++;\n      }\n\n      this.ranges = newRanges.concat(this.ranges.slice(i));\n\n      this._update_length();\n    };\n\n    if (a instanceof DRange) {\n      a.ranges.forEach(_subtract);\n    } else {\n      if (b == null) b = a;\n\n      _subtract(new SubRange(a, b));\n    }\n\n    return this;\n  }\n\n  intersect(a, b) {\n    var newRanges = [];\n\n    var _intersect = subrange => {\n      var i = 0;\n\n      while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n        i++;\n      }\n\n      while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n        var low = Math.max(this.ranges[i].low, subrange.low);\n        var high = Math.min(this.ranges[i].high, subrange.high);\n        newRanges.push(new SubRange(low, high));\n        i++;\n      }\n    };\n\n    if (a instanceof DRange) {\n      a.ranges.forEach(_intersect);\n    } else {\n      if (b == null) b = a;\n\n      _intersect(new SubRange(a, b));\n    }\n\n    this.ranges = newRanges;\n\n    this._update_length();\n\n    return this;\n  }\n\n  index(index) {\n    var i = 0;\n\n    while (i < this.ranges.length && this.ranges[i].length <= index) {\n      index -= this.ranges[i].length;\n      i++;\n    }\n\n    return this.ranges[i].low + index;\n  }\n\n  toString() {\n    return '[ ' + this.ranges.join(', ') + ' ]';\n  }\n\n  clone() {\n    return new DRange(this);\n  }\n\n  numbers() {\n    return this.ranges.reduce((result, subrange) => {\n      var i = subrange.low;\n\n      while (i <= subrange.high) {\n        result.push(i);\n        i++;\n      }\n\n      return result;\n    }, []);\n  }\n\n  subranges() {\n    return this.ranges.map(subrange => ({\n      low: subrange.low,\n      high: subrange.high,\n      length: 1 + subrange.high - subrange.low\n    }));\n  }\n\n}\n\nmodule.exports = DRange;","map":{"version":3,"names":["SubRange","constructor","low","high","length","overlaps","range","touches","add","Math","min","max","subtract","toString","DRange","a","b","ranges","_update_length","reduce","previous","_add","subrange","i","newRanges","slice","push","concat","forEach","_subtract","intersect","_intersect","index","join","clone","numbers","result","subranges","map","module","exports"],"sources":["C:/Users/Matija Milosevic/Downloads/PIA/InternetApplicationProject/Projekat/frontend/node_modules/drange/lib/index.js"],"sourcesContent":["'use strict';\n/* eslint indent: 4 */\n\n\n// Private helper class\nclass SubRange {\n    constructor(low, high) {\n        this.low = low;\n        this.high = high;\n        this.length = 1 + high - low;\n    }\n\n    overlaps(range) {\n        return !(this.high < range.low || this.low > range.high);\n    }\n\n    touches(range) {\n        return !(this.high + 1 < range.low || this.low - 1 > range.high);\n    }\n\n    // Returns inclusive combination of SubRanges as a SubRange.\n    add(range) {\n        return new SubRange(\n            Math.min(this.low, range.low),\n            Math.max(this.high, range.high)\n        );\n    }\n\n    // Returns subtraction of SubRanges as an array of SubRanges.\n    // (There's a case where subtraction divides it in 2)\n    subtract(range) {\n        if (range.low <= this.low && range.high >= this.high) {\n            return [];\n        } else if (range.low > this.low && range.high < this.high) {\n            return [\n                new SubRange(this.low, range.low - 1),\n                new SubRange(range.high + 1, this.high)\n            ];\n        } else if (range.low <= this.low) {\n            return [new SubRange(range.high + 1, this.high)];\n        } else {\n            return [new SubRange(this.low, range.low - 1)];\n        }\n    }\n\n    toString() {\n        return this.low == this.high ?\n            this.low.toString() : this.low + '-' + this.high;\n    }\n}\n\n\nclass DRange {\n    constructor(a, b) {\n        this.ranges = [];\n        this.length = 0;\n        if (a != null) this.add(a, b);\n    }\n\n    _update_length() {\n        this.length = this.ranges.reduce((previous, range) => {\n            return previous + range.length;\n        }, 0);\n    }\n\n    add(a, b) {\n        var _add = (subrange) => {\n            var i = 0;\n            while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {\n                i++;\n            }\n            var newRanges = this.ranges.slice(0, i);\n            while (i < this.ranges.length && subrange.touches(this.ranges[i])) {\n                subrange = subrange.add(this.ranges[i]);\n                i++;\n            }\n            newRanges.push(subrange);\n            this.ranges = newRanges.concat(this.ranges.slice(i));\n            this._update_length();\n        }\n\n        if (a instanceof DRange) {\n            a.ranges.forEach(_add);\n        } else {\n            if (b == null) b = a;\n            _add(new SubRange(a, b));\n        }\n        return this;\n    }\n\n    subtract(a, b) {\n        var _subtract = (subrange) => {\n            var i = 0;\n            while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n                i++;\n            }\n            var newRanges = this.ranges.slice(0, i);\n            while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n                newRanges = newRanges.concat(this.ranges[i].subtract(subrange));\n                i++;\n            }\n            this.ranges = newRanges.concat(this.ranges.slice(i));\n            this._update_length();\n        };\n\n        if (a instanceof DRange) {\n            a.ranges.forEach(_subtract);\n        } else {\n            if (b == null) b = a;\n            _subtract(new SubRange(a, b));\n        }\n        return this;\n    }\n\n    intersect(a, b) {\n        var newRanges = [];\n        var _intersect = (subrange) => {\n            var i = 0;\n            while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n                i++;\n            }\n            while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n                var low = Math.max(this.ranges[i].low, subrange.low);\n                var high = Math.min(this.ranges[i].high, subrange.high);\n                newRanges.push(new SubRange(low, high));\n                i++;\n            }\n        };\n\n        if (a instanceof DRange) {\n            a.ranges.forEach(_intersect);\n        } else {\n            if (b == null) b = a;\n            _intersect(new SubRange(a, b));\n        }\n        this.ranges = newRanges;\n        this._update_length();\n        return this;\n    }\n\n    index(index) {\n        var i = 0;\n        while (i < this.ranges.length && this.ranges[i].length <= index) {\n            index -= this.ranges[i].length;\n            i++;\n        }\n        return this.ranges[i].low + index;\n    }\n\n    toString() {\n        return '[ ' + this.ranges.join(', ') + ' ]';\n    }\n\n    clone() {\n        return new DRange(this);\n    }\n\n    numbers() {\n        return this.ranges.reduce((result, subrange) => {\n            var i = subrange.low;\n            while (i <= subrange.high) {\n                result.push(i);\n                i++;\n            }\n            return result;\n        }, []);\n    }\n\n    subranges() {\n        return this.ranges.map((subrange) => ({\n            low: subrange.low,\n            high: subrange.high,\n            length: 1 + subrange.high - subrange.low\n        }));\n    }\n}\n\nmodule.exports = DRange;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}