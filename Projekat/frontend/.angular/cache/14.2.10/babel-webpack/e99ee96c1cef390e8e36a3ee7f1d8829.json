{"ast":null,"code":"const ret = require('ret');\n\nconst DRange = require('drange');\n\nconst types = ret.types;\nmodule.exports = class RandExp {\n  /**\n   * @constructor\n   * @param {RegExp|String} regexp\n   * @param {String} m\n   */\n  constructor(regexp, m) {\n    this._setDefaults(regexp);\n\n    if (regexp instanceof RegExp) {\n      this.ignoreCase = regexp.ignoreCase;\n      this.multiline = regexp.multiline;\n      regexp = regexp.source;\n    } else if (typeof regexp === 'string') {\n      this.ignoreCase = m && m.indexOf('i') !== -1;\n      this.multiline = m && m.indexOf('m') !== -1;\n    } else {\n      throw new Error('Expected a regexp or string');\n    }\n\n    this.tokens = ret(regexp);\n  }\n  /**\n   * Checks if some custom properties have been set for this regexp.\n   *\n   * @param {RandExp} randexp\n   * @param {RegExp} regexp\n   */\n\n\n  _setDefaults(regexp) {\n    // When a repetitional token has its max set to Infinite,\n    // randexp won't actually generate a random amount between min and Infinite\n    // instead it will see Infinite as min + 100.\n    this.max = regexp.max != null ? regexp.max : RandExp.prototype.max != null ? RandExp.prototype.max : 100; // This allows expanding to include additional characters\n    // for instance: RandExp.defaultRange.add(0, 65535);\n\n    this.defaultRange = regexp.defaultRange ? regexp.defaultRange : this.defaultRange.clone();\n\n    if (regexp.randInt) {\n      this.randInt = regexp.randInt;\n    }\n  }\n  /**\n   * Generates the random string.\n   *\n   * @return {String}\n   */\n\n\n  gen() {\n    return this._gen(this.tokens, []);\n  }\n  /**\n   * Generate random string modeled after given tokens.\n   *\n   * @param {Object} token\n   * @param {Array.<String>} groups\n   * @return {String}\n   */\n\n\n  _gen(token, groups) {\n    var stack, str, n, i, l;\n\n    switch (token.type) {\n      case types.ROOT:\n      case types.GROUP:\n        // Ignore lookaheads for now.\n        if (token.followedBy || token.notFollowedBy) {\n          return '';\n        } // Insert placeholder until group string is generated.\n\n\n        if (token.remember && token.groupNumber === undefined) {\n          token.groupNumber = groups.push(null) - 1;\n        }\n\n        stack = token.options ? this._randSelect(token.options) : token.stack;\n        str = '';\n\n        for (i = 0, l = stack.length; i < l; i++) {\n          str += this._gen(stack[i], groups);\n        }\n\n        if (token.remember) {\n          groups[token.groupNumber] = str;\n        }\n\n        return str;\n\n      case types.POSITION:\n        // Do nothing for now.\n        return '';\n\n      case types.SET:\n        var expandedSet = this._expand(token);\n\n        if (!expandedSet.length) {\n          return '';\n        }\n\n        return String.fromCharCode(this._randSelect(expandedSet));\n\n      case types.REPETITION:\n        // Randomly generate number between min and max.\n        n = this.randInt(token.min, token.max === Infinity ? token.min + this.max : token.max);\n        str = '';\n\n        for (i = 0; i < n; i++) {\n          str += this._gen(token.value, groups);\n        }\n\n        return str;\n\n      case types.REFERENCE:\n        return groups[token.value - 1] || '';\n\n      case types.CHAR:\n        var code = this.ignoreCase && this._randBool() ? this._toOtherCase(token.value) : token.value;\n        return String.fromCharCode(code);\n    }\n  }\n  /**\n   * If code is alphabetic, converts to other case.\n   * If not alphabetic, returns back code.\n   *\n   * @param {Number} code\n   * @return {Number}\n   */\n\n\n  _toOtherCase(code) {\n    return code + (97 <= code && code <= 122 ? -32 : 65 <= code && code <= 90 ? 32 : 0);\n  }\n  /**\n   * Randomly returns a true or false value.\n   *\n   * @return {Boolean}\n   */\n\n\n  _randBool() {\n    return !this.randInt(0, 1);\n  }\n  /**\n   * Randomly selects and returns a value from the array.\n   *\n   * @param {Array.<Object>} arr\n   * @return {Object}\n   */\n\n\n  _randSelect(arr) {\n    if (arr instanceof DRange) {\n      return arr.index(this.randInt(0, arr.length - 1));\n    }\n\n    return arr[this.randInt(0, arr.length - 1)];\n  }\n  /**\n   * expands a token to a DiscontinuousRange of characters which has a\n   * length and an index function (for random selecting)\n   *\n   * @param {Object} token\n   * @return {DiscontinuousRange}\n   */\n\n\n  _expand(token) {\n    if (token.type === ret.types.CHAR) {\n      return new DRange(token.value);\n    } else if (token.type === ret.types.RANGE) {\n      return new DRange(token.from, token.to);\n    } else {\n      let drange = new DRange();\n\n      for (let i = 0; i < token.set.length; i++) {\n        let subrange = this._expand(token.set[i]);\n\n        drange.add(subrange);\n\n        if (this.ignoreCase) {\n          for (let j = 0; j < subrange.length; j++) {\n            let code = subrange.index(j);\n\n            let otherCaseCode = this._toOtherCase(code);\n\n            if (code !== otherCaseCode) {\n              drange.add(otherCaseCode);\n            }\n          }\n        }\n      }\n\n      if (token.not) {\n        return this.defaultRange.clone().subtract(drange);\n      } else {\n        return this.defaultRange.clone().intersect(drange);\n      }\n    }\n  }\n  /**\n   * Randomly generates and returns a number between a and b (inclusive).\n   *\n   * @param {Number} a\n   * @param {Number} b\n   * @return {Number}\n   */\n\n\n  randInt(a, b) {\n    return a + Math.floor(Math.random() * (1 + b - a));\n  }\n  /**\n   * Default range of characters to generate from.\n   */\n\n\n  get defaultRange() {\n    return this._range = this._range || new DRange(32, 126);\n  }\n\n  set defaultRange(range) {\n    this._range = range;\n  }\n  /**\n   *\n   * Enables use of randexp with a shorter call.\n   *\n   * @param {RegExp|String| regexp}\n   * @param {String} m\n   * @return {String}\n   */\n\n\n  static randexp(regexp, m) {\n    var randexp;\n\n    if (typeof regexp === 'string') {\n      regexp = new RegExp(regexp, m);\n    }\n\n    if (regexp._randexp === undefined) {\n      randexp = new RandExp(regexp, m);\n      regexp._randexp = randexp;\n    } else {\n      randexp = regexp._randexp;\n\n      randexp._setDefaults(regexp);\n    }\n\n    return randexp.gen();\n  }\n  /**\n   * Enables sugary /regexp/.gen syntax.\n   */\n\n\n  static sugar() {\n    /* eshint freeze:false */\n    RegExp.prototype.gen = function () {\n      return RandExp.randexp(this);\n    };\n  }\n\n};","map":{"version":3,"names":["ret","require","DRange","types","module","exports","RandExp","constructor","regexp","m","_setDefaults","RegExp","ignoreCase","multiline","source","indexOf","Error","tokens","max","prototype","defaultRange","clone","randInt","gen","_gen","token","groups","stack","str","n","i","l","type","ROOT","GROUP","followedBy","notFollowedBy","remember","groupNumber","undefined","push","options","_randSelect","length","POSITION","SET","expandedSet","_expand","String","fromCharCode","REPETITION","min","Infinity","value","REFERENCE","CHAR","code","_randBool","_toOtherCase","arr","index","RANGE","from","to","drange","set","subrange","add","j","otherCaseCode","not","subtract","intersect","a","b","Math","floor","random","_range","range","randexp","_randexp","sugar"],"sources":["C:/Users/Matija Milosevic/Downloads/PIA/InternetApplicationProject/Projekat/frontend/node_modules/randexp/lib/randexp.js"],"sourcesContent":["const ret    = require('ret');\nconst DRange = require('drange');\nconst types  = ret.types;\n\n\nmodule.exports = class RandExp {\n  /**\n   * @constructor\n   * @param {RegExp|String} regexp\n   * @param {String} m\n   */\n  constructor(regexp, m) {\n    this._setDefaults(regexp);\n    if (regexp instanceof RegExp) {\n      this.ignoreCase = regexp.ignoreCase;\n      this.multiline = regexp.multiline;\n      regexp = regexp.source;\n\n    } else if (typeof regexp === 'string') {\n      this.ignoreCase = m && m.indexOf('i') !== -1;\n      this.multiline = m && m.indexOf('m') !== -1;\n    } else {\n      throw new Error('Expected a regexp or string');\n    }\n\n    this.tokens = ret(regexp);\n  }\n\n\n  /**\n   * Checks if some custom properties have been set for this regexp.\n   *\n   * @param {RandExp} randexp\n   * @param {RegExp} regexp\n   */\n  _setDefaults(regexp) {\n    // When a repetitional token has its max set to Infinite,\n    // randexp won't actually generate a random amount between min and Infinite\n    // instead it will see Infinite as min + 100.\n    this.max = regexp.max != null ? regexp.max :\n      RandExp.prototype.max != null ? RandExp.prototype.max : 100;\n\n    // This allows expanding to include additional characters\n    // for instance: RandExp.defaultRange.add(0, 65535);\n    this.defaultRange = regexp.defaultRange ?\n      regexp.defaultRange : this.defaultRange.clone();\n\n    if (regexp.randInt) {\n      this.randInt = regexp.randInt;\n    }\n  }\n\n\n  /**\n   * Generates the random string.\n   *\n   * @return {String}\n   */\n  gen() {\n    return this._gen(this.tokens, []);\n  }\n\n\n  /**\n   * Generate random string modeled after given tokens.\n   *\n   * @param {Object} token\n   * @param {Array.<String>} groups\n   * @return {String}\n   */\n  _gen(token, groups) {\n    var stack, str, n, i, l;\n\n    switch (token.type) {\n      case types.ROOT:\n      case types.GROUP:\n        // Ignore lookaheads for now.\n        if (token.followedBy || token.notFollowedBy) { return ''; }\n\n        // Insert placeholder until group string is generated.\n        if (token.remember && token.groupNumber === undefined) {\n          token.groupNumber = groups.push(null) - 1;\n        }\n\n        stack = token.options ?\n          this._randSelect(token.options) : token.stack;\n\n        str = '';\n        for (i = 0, l = stack.length; i < l; i++) {\n          str += this._gen(stack[i], groups);\n        }\n\n        if (token.remember) {\n          groups[token.groupNumber] = str;\n        }\n        return str;\n\n      case types.POSITION:\n        // Do nothing for now.\n        return '';\n\n      case types.SET:\n        var expandedSet = this._expand(token);\n        if (!expandedSet.length) { return ''; }\n        return String.fromCharCode(this._randSelect(expandedSet));\n\n      case types.REPETITION:\n        // Randomly generate number between min and max.\n        n = this.randInt(token.min,\n          token.max === Infinity ? token.min + this.max : token.max);\n\n        str = '';\n        for (i = 0; i < n; i++) {\n          str += this._gen(token.value, groups);\n        }\n\n        return str;\n\n      case types.REFERENCE:\n        return groups[token.value - 1] || '';\n\n      case types.CHAR:\n        var code = this.ignoreCase && this._randBool() ?\n          this._toOtherCase(token.value) : token.value;\n        return String.fromCharCode(code);\n    }\n  }\n\n\n  /**\n   * If code is alphabetic, converts to other case.\n   * If not alphabetic, returns back code.\n   *\n   * @param {Number} code\n   * @return {Number}\n   */\n  _toOtherCase(code) {\n    return code + (97 <= code && code <= 122 ? -32 :\n      65 <= code && code <= 90  ?  32 : 0);\n  }\n\n\n  /**\n   * Randomly returns a true or false value.\n   *\n   * @return {Boolean}\n   */\n  _randBool() {\n    return !this.randInt(0, 1);\n  }\n\n\n  /**\n   * Randomly selects and returns a value from the array.\n   *\n   * @param {Array.<Object>} arr\n   * @return {Object}\n   */\n  _randSelect(arr) {\n    if (arr instanceof DRange) {\n      return arr.index(this.randInt(0, arr.length - 1));\n    }\n    return arr[this.randInt(0, arr.length - 1)];\n  }\n\n\n  /**\n   * expands a token to a DiscontinuousRange of characters which has a\n   * length and an index function (for random selecting)\n   *\n   * @param {Object} token\n   * @return {DiscontinuousRange}\n   */\n  _expand(token) {\n    if (token.type === ret.types.CHAR) {\n      return new DRange(token.value);\n    } else if (token.type === ret.types.RANGE) {\n      return new DRange(token.from, token.to);\n    } else {\n      let drange = new DRange();\n      for (let i = 0; i < token.set.length; i++) {\n        let subrange = this._expand(token.set[i]);\n        drange.add(subrange);\n        if (this.ignoreCase) {\n          for (let j = 0; j < subrange.length; j++) {\n            let code = subrange.index(j);\n            let otherCaseCode = this._toOtherCase(code);\n            if (code !== otherCaseCode) {\n              drange.add(otherCaseCode);\n            }\n          }\n        }\n      }\n      if (token.not) {\n        return this.defaultRange.clone().subtract(drange);\n      } else {\n        return this.defaultRange.clone().intersect(drange);\n      }\n    }\n  }\n\n\n  /**\n   * Randomly generates and returns a number between a and b (inclusive).\n   *\n   * @param {Number} a\n   * @param {Number} b\n   * @return {Number}\n   */\n  randInt(a, b) {\n    return a + Math.floor(Math.random() * (1 + b - a));\n  }\n\n\n  /**\n   * Default range of characters to generate from.\n   */\n  get defaultRange() {\n    return this._range = this._range || new DRange(32, 126);\n  }\n\n  set defaultRange(range) {\n    this._range = range;\n  }\n\n\n  /**\n   *\n   * Enables use of randexp with a shorter call.\n   *\n   * @param {RegExp|String| regexp}\n   * @param {String} m\n   * @return {String}\n   */\n  static randexp(regexp, m) {\n    var randexp;\n    if(typeof regexp === 'string') {\n      regexp = new RegExp(regexp, m);\n    }\n\n    if (regexp._randexp === undefined) {\n      randexp = new RandExp(regexp, m);\n      regexp._randexp = randexp;\n    } else {\n      randexp = regexp._randexp;\n      randexp._setDefaults(regexp);\n    }\n    return randexp.gen();\n  }\n\n\n  /**\n   * Enables sugary /regexp/.gen syntax.\n   */\n  static sugar() {\n    /* eshint freeze:false */\n    RegExp.prototype.gen = function() {\n      return RandExp.randexp(this);\n    };\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}